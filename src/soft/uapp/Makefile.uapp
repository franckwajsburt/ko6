#---------------------------------------------------------------------------------------------------
#  _     ___    __
# | |__ /'v'\  / /   	\date       2022-07-03
# | / /(     )/ _ \   	\copyright  2021-2022 Sorbonne University
# |_\_\ x___x \___/                 https://opensource.org/licenses/MIT
#
# \file     uapp/Makefile.uapp
# \author   Franck Wajsburt
# \brief    Makefile to produce a single application executable
# 			This Makefile must be included in user app Makefile, see hello/Makefile for details
#
#--------------------------------------------------------------------------------------------------

# Parameters
# --------------------------------------------------------------------------------------------------

SOC    ?= almo1-mips#				defaut SOC name
V      ?= 0#						verbose mode to print INFO(), BIP(), ASSERT, VAR()
BLDDIR	= $(ko6)/build#				build directory
SRCDIR	= $(ko6)/src/soft#			source directories
COMDIR	= $(SRCDIR)/common#			user & kernel common files directory
LIBDIR	= $(SRCDIR)/ulib#			library directory (where is ldscript)
HALDIR	= $(SRCDIR)/hal#			hardware abstraction layer (hal) files directory
SOCDIR	= $(HALDIR)/soc/$(SOC)#		current soc hardware abstraction layer (hal) files directory
CURDIR 	= $(notdir $(shell pwd))#	name of curent directory
OBJRDIR	= $(BLDDIR)/uobj#			user object files directory
OBJDIR	= $(OBJRDIR)/$(CURDIR)#		object files directory
BINDIR	= $(BLDDIR)/$(CURDIR)#		executable directory
PDFDIR	= $(BLDDIR)/updf#			user pdf files directory
PDF 	= $(PDFDIR)/$(CURDIR).pdf#	the pdf file has the name of directory
BIN     = $(BINDIR)/$(CURDIR).x#	the binary file has the name of directory

# Sources
# --------------------------------------------------------------------------------------------------

SRC	   ?= "source files"#			must be defined in all app Makefiles
LDSCRIPT?= app.ld#					ldscript is hal dependent
APPNB  ?= 1#						by default it should be application 1

# Targets
# --------------------------------------------------------------------------------------------------

LIB		= crt0.o libc.o pthread.o memory.o errno.o cpu_user.o ht_prob.o ctype.o
LIB 	+= cstd.o

SRCC    = $(filter %.c,$(SRC))
OBJC    = $(subst .c,.o,$(foreach src,$(SRCC),$(notdir $(src))))
OBJ     = $(addprefix $(OBJDIR)/,$(OBJC))
OBJDS   = $(addsuffix .s,$(OBJ))
OBJLIB	= $(addprefix $(OBJRDIR)/,$(LIB))

# Tools
# --------------------------------------------------------------------------------------------------

include $(SRCDIR)/hal/soc/$(SOC)/$(SOC).mk

CFLAGS += -c#						stop after compilation, then produce .o
CFLAGS += -Wall -Werror#			gives almost all C warnings and considers them to be errors
CFLAGS += -std=c99#					define of syntax version of C
CFLAGS += -fno-common#				do not use common sections for non-static vars (only bss)
CFLAGS += -fno-builtin#				do not use builtin functions of gcc (such as strlen)
CFLAGS += -fomit-frame-pointer#		only use of stack pointer ($29)
CFLAGS += -O3#						full optimisation mode of compiler
CFLAGS += -I. -I../.. -I$(COMDIR)#	directories where include files like <file.h> are located
CFLAGS += -I$(LIBDIR)#				directories where include files like <file.h> are located
CFLAGS += -I$(HALDIR) -I$(SOCDIR)#	directories where include files like <file.h> are located
CFLAGS += -DVERBOSE=$(V)#			verbose if 1, can be toggled with #include <debug_{on,off}.h> 

LDFLAGS += -L$(SOCDIR) -T $(LDSCRIPT) $(OBJLIB)

# Rules (here they are used such as simple shell scripts)
# --------------------------------------------------------------------------------------------------
 
.PHONY: help compil mkdir pdf clean depend

help:
	@echo ""
	@echo "Usage : make <compil|clean|pdf>"
	@echo ""
	@echo "        compil  : compile all sources"
	@echo "        clean   : clean all compiled files"
	@echo "        pdf     : generate $(PDF) with all source files"
	@echo ""

compil: depend mkdir $(BIN)

mkdir:
	test -d $(BLDDIR) || mkdir $(BLDDIR)
	test -d $(OBJRDIR) || (echo "- mkdir   $(OBJRDIR)" ; mkdir $(OBJRDIR))
	test -d $(OBJDIR) || (echo "- mkdir   $(OBJDIR)" ; mkdir $(OBJDIR))
	test -d $(BINDIR) || (echo "- mkdir   $(BINDIR)" ; mkdir $(BINDIR))

pdf:
	test -d $(BLDDIR) || mkdir $(BLDDIR)
	test -d $(PDFDIR) || (echo "- mkdir   $(PDFDIR)" ; mkdir $(PDFDIR))
	a2ps -T4 -2 -M A4 -A fill -o - -l100 Makefile $(SRC) 2> $(PDF).log |\
	ps2pdf -sPAPERSIZE=a4 - $(PDF);\
	echo "- create $(PDF)";\
	sed 's/^/  - /;s/\].*/\]/' $(PDF).log

clean:
	@echo "- clean $(notdir $(BIN)) and related build files"
	-rm *~ segment.ld $(OBJ) $(OBJDS) $(BIN)* $(PDF) $(PDF).log 2> /dev/null || true
	-rmdir $(OBJDIR) 2> /dev/null || true
	awk '/^# DEPENDENCIES/{stop=1}(!stop){print}' Makefile > Makefile.bak
	mv Makefile.bak Makefile

# Rules with automatic variables to produce the executable
# --------------------------------------------------------------------------------------------------

$(BIN) : $(OBJ)
	@echo "- link    --> "$(notdir $@)
	sed "s/(APPNB)/$(APPNB)/" $(SOCDIR)/segs.ld > segment.ld
	$(LD) -o $@ $(LDFLAGS) $^
	truncate -s %4096 $(BIN)
	$(OD) -D $@ > $@.s

$(OBJDIR)/%.o : %.c $(OBJLIB)
	@echo "- compil  --> "$(notdir $@)
	$(CC) -o $@ $(CFLAGS) $<
	$(OD) -D $@ > $@.s

# makedepend analyzes the source files to determine automatically what are the dependencies
# of the object files on the source files (see https://linux.die.net/man/1/makedepend for details)
depend :
	@echo "- makedepend for $(CURDIR) ($(APPNB))"
	makedepend -- $(CFLAGS) -- -D__DEPEND__ -s"# DEPENDENCIES" -p$(OBJDIR)/ $(SRC)
	/usr/bin/sed '/^# DEPENDENCIES/,$$s:/$(SOCDIR)/:/:' Makefile > Makefile.bak
	mv Makefile.bak Makefile

# --------------------------------------------------------------------------------------------------
